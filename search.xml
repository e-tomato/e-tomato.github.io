<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Welcome-To-my-World!]]></title>
      <url>%2F2017%2F03%2F12%2Ftest%2F</url>
      <content type="text"><![CDATA[只是测试一下。oyeah！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基因调控网络的演化层级关系]]></title>
      <url>%2F2015%2F07%2F02%2F%E5%9F%BA%E5%9B%A0%E8%B0%83%E6%8E%A7%E7%BD%91%E7%BB%9C%E7%9A%84%E6%BC%94%E5%8C%96%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB%2F</url>
      <content type="text"><![CDATA[来源是Nature review上的一篇opinion：The evolution of hierarchical gene regulatory networks, 作者Dougloas H.Erwin和Eric H.Davidson]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[概率统计学习-My Questionnaire]]></title>
      <url>%2F2015%2F06%2F06%2F%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0-%E4%B8%80%2F</url>
      <content type="text"><![CDATA[刚在看吴喜之教授的《统计学：从数据到结论》中发现很多以前没想到的很有意思的概念。 Questionnaire，我以前一直只认为它是市场营销类的专业词。其实，对各个需要得到数据的科学领域，这个表是引导获取原始数据的最关键环节，更是引导深入分析的支持点。基于个人的理解，一份questionnaire应该需要这些思路： 对于单基因的研究 获得该基因的所有能获得的背景信息（包括基因序列，保守结构域分析，表达谱，定位分析，进化分析，启动子分析，同源基因功能备注等等），准备制作问卷表； 根据突变缺失或超表达（研究单基因必需的步骤），问在哪些组织具有表型（这个通常不会太多，一般只是几个focus），分类分层次，标定为N个tissue.level； 在不同tissue.level上，非正常/正常值比例（显著吗？），非正常值在器官和细胞层次的不同指标（这个得需要寻找类似研究作参考）的变化。同样分层次，标定为N个organ.level和cell.level（如观察到花出现表型，多少花不正常？不正常的花出现在哪些位置？各个花器官数量是多少？各花器官的大小是否发生变化？分化出该器官的花的细胞数量是否发生变化？细胞位置，细胞大小，形态等是否发生变化？等等） 基于不同level下的表型，寻找，分析，推断可能的具有关联性的基因（关联性包括上游，下游，平等）。如果文献支撑强的话，问：我找到的这些基因是否可以具有这种关系，是哪种关系？然后就可以直接试验（包括转录和蛋白水平的检测，DNA蛋白互作，蛋白互作等）；如果无法顺利找到时，而花费又允许的情况下，问是否可以用RNA-seq 差异基因检测，ChIP-seq结合DNA检测，蛋白质差异检测？]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[随机抽样中覆盖率、重复率概率分析]]></title>
      <url>%2F2015%2F05%2F21%2F%E9%9A%8F%E6%9C%BA%E6%8A%BD%E6%A0%B7%E4%B8%AD%E8%A6%86%E7%9B%96%E7%8E%87%E3%80%81%E9%87%8D%E5%A4%8D%E7%8E%87%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[问题1：从标有1-10号的球中，每次随机有放回的抽取10个球，至少重复多少次能把全部10个数字抽取完？每次试验100次，计算覆盖率的均值作为一次试验的结果。然后统计1个100次试验~1000个100次试验的覆盖率的plot图。12345678910111213141516x&lt;-c()coverge&lt;-c()mean.cov &lt;-c()for (m in 1:1000)&#123; x[m]&lt;-m for (n in 1:100) &#123; coverge[n]&lt;-length(levels(factor(sample(1:10,10,replace=T))))/10 &#125; mean.cov[m] &lt;- mean(coverge)&#125;xsummary(mean.cov)plot(x,mean.cov) 所以，1000次试验，覆盖率的均值基本不会变化(都在61.4~68.1%)。即单纯的重复有限次抽取并不能保证都抽到。（限制因子有：单次抽取的球的个数（10个，越多自然能得到更高覆盖率）、样本容量size（10个球，5个则是84.6%~92.8%，6个则是80%~88%，7个则是75%~82%，8个则是71%~77%，9个则是65%~73%） 问题2：同上，单个数字被平均重复抽取多少次时，可以把10个数字抽完？每次试验100次，计算覆盖率的均值作为一次试验的结果，计算数字重复次数的均值作为一次试验的结果。然后统计1个100次试验~1000个100次试验的覆盖率和深度的plot图。 12345678910111213141516171819202122x&lt;-c()coverge&lt;-c()mean.cov &lt;-c()mean.dep &lt;-c()dep.aver &lt;-c()sample &lt;-c()for (m in 1:1000)&#123; x[m]&lt;-m for (n in 1:100) &#123; sample&lt;-sample(1:10,10,replace=T) dep.aver[n] &lt;-mean(summary(factor(sample))) coverge[n]&lt;-length(levels(factor(sample)))/10 &#125; mean.dep[m]&lt;- mean(dep.aver) mean.cov[m] &lt;- mean(coverge)&#125;xsummary(mean.cov)summary(mean.dep)plot(mean.dep,mean.cov) 所以，1000次试验中，无论怎样，覆盖率的均值基本不会变化(都在62.0~68.6%，也即是上问的结果：即单纯的重复有限次抽取并不能保证全部都抽到。)；同时，虽然深度和覆盖率呈线性负相关性，但在单纯的重复有限次抽取情况下根本不可能本质上的增加深度（本例中，mean.dep=（1.491，1.658）。而是，深度与抽取次数相关。如果我一次性有放回抽取的是20个，那么，覆盖率范围变大（84.3%~90.6%），深度变为（2.227~2.403）。 问题3：从标有1-10号的球中，仅限抽取一次，随机抽取多少个球能把10个数字全部抽完？试验100次，每次取平均值，得到plot图。123456789101112131415x&lt;-c()coverge&lt;-c()mean.cov &lt;-c()for (m in 1:50)&#123; x[m]&lt;-m for (n in 1:100) &#123; coverge[n]&lt;-length(levels(factor(sample(1:10,m,replace=T))))/10 &#125; mean.cov[m] &lt;- mean(coverge)&#125;xcovergeplot(x,mean.cov) 所以，约20~30次计数抽取即可覆盖80%~90%的号。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R基本命令(不完全记录）]]></title>
      <url>%2F2015%2F05%2F19%2FR%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%AE%B0%E5%BD%95%EF%BC%89%2F</url>
      <content type="text"><![CDATA[This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. 查看getwd()当前工作路径;设定setwd()工作路径; getwd() ## [1] &quot;D:/On-learning/R&amp;Statistic_life_science/R_basics&quot; setwd(&quot;D:/On-learning/R&amp;Statistic_life_science/R_basics/&quot;) 下载数据。需要downloader包，download语法如下： download(“https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/”,“msleep_ggplot2.csv”) 导入数据。对于不同的类型的数据格式需用不同的导入函数，一般是read.table, read.csv, read.dataframe… 如果数据表格中没有标题行，则需加入 header=FASLE，数据中的每列标题则是V1，V2…等，可以用df$V1等取子集；默认包含标题，标题行是第一行。 df &lt;- read.csv(&quot;msleep_ggplot2.csv&quot;, header = TRUE) 查看数据基本信息：head，tail，dim，summary，typeof等。 head(df) #表头 ## name genus vore order conservation ## 1 Cheetah Acinonyx carni Carnivora lc ## 2 Owl monkey Aotus omni Primates &lt;NA&gt; ## 3 Mountain beaver Aplodontia herbi Rodentia nt ## 4 Greater short-tailed shrew Blarina omni Soricomorpha lc ## 5 Cow Bos herbi Artiodactyla domesticated ## 6 Three-toed sloth Bradypus herbi Pilosa &lt;NA&gt; ## sleep_total sleep_rem sleep_cycle awake brainwt bodywt ## 1 12.1 NA NA 11.9 NA 50.000 ## 2 17.0 1.8 NA 7.0 0.01550 0.480 ## 3 14.4 2.4 NA 9.6 NA 1.350 ## 4 14.9 2.3 0.1333333 9.1 0.00029 0.019 ## 5 4.0 0.7 0.6666667 20.0 0.42300 600.000 ## 6 14.4 2.2 0.7666667 9.6 NA 3.850 dim(df) ## [1] 83 11 summary(df$sleep_total) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.90 7.85 10.10 10.43 13.75 19.90 对导入的数据进行筛选，排查，标准化 对部分数据进行分析时，需要取子集[]。常用的是某行/列，连续或指定的几行/几列，满足条件的行/列； df.head.5 &lt;-df[c(1:5),] #对前五行取子集,等同于head(df,5)。构建一个向量指定具体行，如c(2,3,6,7) df.any.3 &lt;- df[sample(1:11,3,replace=F),] #对任意（非重复）3行取子集 df.high.sleep &lt;-df[df$sleep_total &gt;18,] #df$sleep_total&gt;=18即是一个逻辑值组成的向量，表示所有满足条件的行。【通过逻辑值得到数值数据】 df.highest.sleep &lt;- df[df$sleep_total==max(df$sleep_total,na.rm=T),] #去除na值之后，取sleep_total值为最大的那一行。 mean(df[df$sleep_total&gt;18,]$sleep_total) #计算sleep_total大于18的平均值。 ## [1] 19.275 对向量vector的几种常用操作。包括查找(which,match)，排序(sort, order, rank) #which which(df$sleep_total&gt;18) #得到满足条件的**行号**！注意，是**行号**！组成数字索引(numeric index)。然后获得相应行的所有信息，即可用： ## [1] 22 37 43 62 df[which(df$sleep_total&gt;18),] #效果其实跟df[df$sleep_total &gt;18,]是一样的。**which**意思即是得到满足条件的**那些行号**。 ## name genus vore order conservation ## 22 Big brown bat Eptesicus insecti Chiroptera lc ## 37 Thick-tailed opposum Lutreolina carni Didelphimorphia lc ## 43 Little brown bat Myotis insecti Chiroptera &lt;NA&gt; ## 62 Giant armadillo Priodontes insecti Cingulata en ## sleep_total sleep_rem sleep_cycle awake brainwt bodywt ## 22 19.7 3.9 0.1166667 4.3 0.00030 0.023 ## 37 19.4 6.6 NA 4.6 NA 0.370 ## 43 19.9 2.0 0.2000000 4.1 0.00025 0.010 ## 62 18.1 6.1 NA 5.9 0.08100 60.000 df$sleep_total[which(df$sleep_total &gt;18)[1]] #获得满足条件的第一行 ## [1] 19.7 df.median.sleep&lt;-df[which(df$sleep_total &gt; quantile(df$sleep_total,probs = 50/100) &amp; df$sleep_rem&lt;3),] df.median.herbi&lt;-df[which(df$sleep_total &gt; quantile(df$sleep_total,probs = 50/100) &amp; df$vore==&quot;herbi&quot;),] #herbi中，输出sleep_total前50%的行信息。 三种排序方式 sort sort(df$sleep_total) #得到满足条件的**值**！注意，这里是**值**！组成数字向量numeric values。 ## [1] 1.9 2.7 2.9 3.0 3.1 3.3 3.5 3.8 3.9 4.0 4.4 5.2 5.3 5.3 ## [15] 5.4 5.6 6.2 6.3 6.3 7.0 7.7 8.0 8.3 8.4 8.4 8.6 8.7 8.7 ## [29] 8.9 9.1 9.1 9.4 9.4 9.5 9.6 9.7 9.8 9.8 10.0 10.1 10.1 10.1 ## [43] 10.3 10.3 10.4 10.6 10.9 11.0 11.0 11.1 11.3 11.5 12.1 12.5 12.5 12.5 ## [57] 12.5 12.8 12.8 13.0 13.5 13.7 13.8 14.2 14.3 14.4 14.4 14.5 14.6 14.9 ## [71] 14.9 15.6 15.8 15.8 15.9 16.6 17.0 17.4 18.0 18.1 19.4 19.7 19.9 #查看df[sort(df$sleep_total),]$sleep_total与sort(df$sleep_total)的值是不同的。 order order(df$sleep_total) #得到满足条件的**行号**！注意，是**行号**！组成数字索引(numeric index)。 ## [1] 30 31 23 10 24 36 59 49 21 5 77 80 11 19 63 60 32 33 81 8 46 34 16 ## [24] 48 67 75 7 65 79 17 74 12 54 35 66 50 29 83 13 9 25 38 15 55 52 69 ## [47] 26 45 56 61 68 57 1 14 28 42 82 41 73 64 53 58 71 39 40 3 6 47 44 ## [70] 4 27 78 51 76 72 70 2 18 20 62 37 22 43 #df[order(df$sleep_total),]$sleep_total与sort(df$sleep_total)的值是相同的。 rank rank(df$sleep_total) #给个值排名，得到的是一个数值向量。 ## [1] 53.0 77.0 66.5 70.5 10.0 66.5 27.5 20.0 41.0 4.0 13.5 32.5 39.0 55.5 ## [15] 43.5 23.0 30.5 78.0 13.5 79.0 9.0 82.0 3.0 5.0 41.0 47.0 70.5 55.5 ## [29] 37.5 1.0 2.0 17.0 18.5 22.0 34.0 6.0 81.0 41.0 64.0 65.0 58.5 55.5 ## [43] 83.0 69.0 48.5 21.0 68.0 24.5 8.0 36.0 73.5 45.0 61.0 32.5 43.5 48.5 ## [57] 52.0 62.0 7.0 16.0 50.0 80.0 15.0 60.0 27.5 35.0 24.5 51.0 46.0 76.0 ## [71] 63.0 75.0 58.5 30.5 26.0 73.5 11.0 72.0 29.0 12.0 18.5 55.5 37.5 rank(c(1,2,2,3)) ## [1] 1.0 2.5 2.5 4.0 #结果为[1] 1.0 2.5 2.5 4.0，共四个，两个并列第2.5 match match(c(&quot;Cow&quot;,&quot;Owl monkey&quot;,&quot;Cheetah&quot;),df$name) #得到满足条件的**行号**！注意，是**行号**！组成数字索引(numeric index)。然后获得相应行的所有信息，即可用 ## [1] 5 2 1 df[match(c(&quot;Cow&quot;,&quot;Owl monkey&quot;,&quot;Cheetah&quot;),df$name),] ## name genus vore order conservation sleep_total ## 5 Cow Bos herbi Artiodactyla domesticated 4.0 ## 2 Owl monkey Aotus omni Primates &lt;NA&gt; 17.0 ## 1 Cheetah Acinonyx carni Carnivora lc 12.1 ## sleep_rem sleep_cycle awake brainwt bodywt ## 5 0.7 0.6666667 20.0 0.4230 600.00 ## 2 1.8 NA 7.0 0.0155 0.48 ## 1 NA NA 11.9 NA 50.00 数据的组合grouping data factor: factor是把字符型向量转换成整数储存在，但同时具有levels属性，即用levels来分类。没有理解到。 vec = c(&quot;red&quot;,&quot;blue&quot;,&quot;red&quot;,&quot;green&quot;,&quot;green&quot;,&quot;yellow&quot;,&quot;orange&quot;) fac = factor(vec) fac ## [1] red blue red green green yellow orange ## Levels: blue green orange red yellow levels(fac) ## [1] &quot;blue&quot; &quot;green&quot; &quot;orange&quot; &quot;red&quot; &quot;yellow&quot; table levels(df$order) ## [1] &quot;Afrosoricida&quot; &quot;Artiodactyla&quot; &quot;Carnivora&quot; ## [4] &quot;Cetacea&quot; &quot;Chiroptera&quot; &quot;Cingulata&quot; ## [7] &quot;Didelphimorphia&quot; &quot;Diprotodontia&quot; &quot;quot;Erinaceomorpha&quot; ## [10] &quot;Hyracoidea&quot; &quot;Lagomorpha&quot; &quot;Monotremata&quot; ## [13] &quot;Perissodactyla&quot; &quot;Pilosa&quot; &quot;Primates&quot; ## [16] &quot;Proboscidea&quot; &quot;Rodentia&quot; &quot;Scandentia&quot; ## [19] &quot;Soricomorpha&quot; table(df$order) #统计出每个因子的个数 ## ## Afrosoricida Artiodactyla Carnivora Cetacea ## 1 6 12 3 ## Chiroptera Cingulata Didelphimorphia Diprotodontia ## 2 2 2 2 ## Erinaceomorpha Hyracoidea Lagomorpha Monotremata ## 2 3 1 1 ## Perissodactyla Pilosa Primates Proboscidea ## 3 1 12 2 ## Rodentia Scandentia Soricomorpha ## 22 1 5 split s&lt;-split(df$sleep_total,df$order) #把表格分列成list，这个list里面包含了所有分列出的表 s #通过length(s)可以查看分列出19个表格。 ## $Afrosoricida ## [1] 15.6 ## ## $Artiodactyla ## [1] 4.0 3.0 5.3 1.9 3.8 9.1 ## ## $Carnivora ## [1] 12.1 8.7 10.1 12.5 6.2 15.8 10.4 13.5 3.5 6.3 12.5 9.8 ## ## $Cetacea ## [1] 2.7 5.6 5.2 ## ## $Chiroptera ## [1] 19.7 19.9 ## ## $Cingulata ## [1] 17.4 18.1 ## ## $Didelphimorphia ## [1] 18.0 19.4 ## ## $Diprotodontia ## [1] 13.7 11.1 ## ## $Erinaceomorpha ## [1] 10.1 10.3 ## ## $Hyracoidea ## [1] 5.3 6.3 5.4 ## ## $Lagomorpha ## [1] 8.4 ## ## $Monotremata ## [1] 8.6 ## ## $Perissodactyla ## [1] 2.9 3.1 4.4 ## ## $Pilosa ## [1] 14.4 ## ## $Primates ## [1] 17.0 10.0 10.9 9.8 8.0 9.5 10.1 11.0 9.7 9.4 11.0 9.6 ## ## $Proboscidea ## [1] 3.9 3.3 ## ## $Rodentia ## [1] 14.4 7.0 9.4 12.5 8.3 14.9 14.2 14.3 12.8 12.5 14.6 7.7 14.5 11.5 ## [15] 13.0 8.7 11.3 10.6 16.6 13.8 15.9 15.8 ## ## $Scandentia ## [1] 8.9 ## ## $Soricomorpha ## [1] 14.9 10.3 9.1 8.4 12.8 s[[1]] ## [1] 15.6 mean(s[[&quot;Rodentia&quot;]]) #查找某一类时，只能用[[]]符号，如果是字符型则需加&quot;&quot;。 ## [1] 12.46818 lapply,sapply, tapply lapply(s,mean) #laaply指对list使用，输出为一个list。这个命令可以高效的做同时运算。 ## $Afrosoricida ## [1] 15.6 ## ## $Artiodactyla ## [1] 4.516667 ## ## $Carnivora ## [1] 10.11667 ## ## $Cetacea ## [1] 4.5 ## ## $Chiroptera ## [1] 19.8 ## ## $Cingulata ## [1] 17.75 ## ## $Didelphimorphia ## [1] 18.7 ## ## $Diprotodontia ## [1] 12.4 ## ## $Erinaceomorpha ## [1] 10.2 ## ## $Hyracoidea ## [1] 5.666667 ## ## $Lagomorpha ## [1] 8.4 ## ## $Monotremata ## [1] 8.6 ## ## $Perissodactyla ## [1] 3.466667 ## ## $Pilosa ## [1] 14.4 ## ## $Primates ## [1] 10.5 ## ## $Proboscidea ## [1] 3.6 ## ## $Rodentia ## [1] 12.46818 ## ## $Scandentia ## [1] 8.9 ## ## $Soricomorpha ## [1] 11.1 sapply(s,mean) #“similify”，原理同上，但是输出的结果直接是一个vector。 ## Afrosoricida Artiodactyla Carnivora Cetacea ## 15.600000 4.516667 10.116667 4.500000 ## Chiroptera Cingulata Didelphimorphia Diprotodontia ## 19.800000 17.750000 18.700000 12.400000 ## Erinaceomorpha Hyracoidea Lagomorpha Monotremata ## 10.200000 5.666667 8.400000 8.600000 ## Perissodactyla Pilosa Primates Proboscidea ## 3.466667 14.400000 10.500000 3.600000 ## Rodentia Scandentia Soricomorpha ## 12.468182 8.900000 11.100000 tapply(df$sleep_total,df$order,mean) #综合了split和sapply，直接输入指定参数，输出目的值并保存于向量中。 ## Afrosoricida Artiodactyla Carnivora Cetacea ## 15.600000 4.516667 10.116667 4.500000 ## Chiroptera Cingulata Didelphimorphia Diprotodontia ## 19.800000 17.750000 18.700000 12.400000 ## Erinaceomorpha Hyracoidea Lagomorpha Monotremata ## 10.200000 5.666667 8.400000 8.600000 ## Perissodactyla Pilosa Primates Proboscidea ## 3.466667 14.400000 10.500000 3.600000 ## Rodentia Scandentia Soricomorpha ## 12.468182 8.900000 11.100000 tapply(df$sleep_total,df$order==&quot;Primates&quot;, sd) #计算所有Primates总睡眠时间的标准差。 ## FALSE TRUE ## 4.736310 2.209895 也可按下计算 lapply(s,sd) ## $Afrosoricida ## [1] NA ## ## $Artiodactyla ## [1] 2.511905 ## ## $Carnivora ## [1] 3.502164 ## ## $Cetacea ## [1] 1.571623 ## ## $Chiroptera ## [1] 0.1414214 ## ## $Cingulata ## [1] 0.4949747 ## ## $Didelphimorphia ## [1] 0.9899495 ## ## $Diprotodontia ## [1] 1.838478 ## ## $Erinaceomorpha ## [1] 0.1414214 ## ## $Hyracoidea ## [1] 0.5507571 ## ## $Lagomorpha ## [1] NA ## ## $Monotremata ## [1] NA ## ## $Perissodactyla ## [1] 0.8144528 ## ## $Pilosa ## [1] NA ## ## $Primates ## [1] 2.209895 ## ## $Proboscidea ## [1] 0.4242641 ## ## $Rodentia ## [1] 2.813299 ## ## $Scandentia ## [1] NA ## ## $Soricomorpha ## [1] 2.704626 sapply(s, sd) ## Afrosoricida Artiodactyla Carnivora Cetacea ## NA 2.5119050 3.5021638 1.5716234 ## Chiroptera Cingulata Didelphimorphia Diprotodontia ## 0.1414214 0.4949747 0.9899495 1.8384776 ## Erinaceomorpha Hyracoidea Lagomorpha Monotremata ## 0.1414214 0.5507571 NA NA ## Perissodactyla Pilosa Primates Proboscidea ## 0.8144528 NA 2.2098951 0.4242641 ## Rodentia Scandentia Soricomorpha ## 2.8132994 NA 2.7046257 tapply(df$sleep_total,df$order,sd) ## Afrosoricida Artiodactyla Carnivora Cetacea ## NA 2.5119050 3.5021638 1.5716234 ## Chiroptera Cingulata Didelphimorphia Diprotodontia ## 0.1414214 0.4949747 0.9899495 1.8384776 ## Erinaceomorpha Hyracoidea Lagomorpha Monotremata ## 0.1414214 0.5507571 NA NA ## Perissodactyla Pilosa Primates Proboscidea ## 0.8144528 NA 2.2098951 0.4242641 ## Rodentia Scandentia Soricomorpha ## 2.8132994 NA 2.7046257 // add bootstrap table styles to pandoc tables $(document).ready(function () { $('tr.header').parent('thead').parent('table').addClass('table table-condensed'); }); (function () { var script = document.createElement("script"); script.type = "text/javascript"; script.src = "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"; document.getElementsByTagName("head")[0].appendChild(script); })();]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[对于生物学测序数据的思路分析]]></title>
      <url>%2F2015%2F05%2F19%2F%E5%AF%B9%E4%BA%8E%E7%94%9F%E7%89%A9%E5%AD%A6%E6%B5%8B%E5%BA%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[对于测序结果，常问的问题： 某一类基因的表达变化量如何？这个某一类包含的信息有：1.基本的筛选过程： p-value or adjust p-value ( &lt;0.05, 0.01, 0.001); Log2FoldChange (abs &gt;=1, or 2); baseMean (&gt;0, or other values); FDR;2.用户定义的筛选过程（user interested）： 各个baseMean百分比下的整体基因变化趋势，]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Markdown格式]]></title>
      <url>%2F2015%2F05%2F13%2FMarkdown%E6%A0%BC%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[初学markdown，很多格式都不清楚，因此本文旨在根据成文的顺序，搜集各博客后总结出语法，以供自己后续练习作参考。 1. 标题Markdown中，只需要在文本前面加上 # 即可，同理、还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。例如：1234# 一级标题## 二级标题...###### 六级标题 效果是这样： 一级标题二级标题…六级标题 也可以用1234大标题=== (&gt;=3个)小标题--- (&gt;=3个) 效果是这样： 大标题小标题 2. 文本内容当我们写作时，需要呈现的基本上包括： 文字 （加粗、斜体、字体、大小、颜色、下划线、删除、分割线） 引用 （文字、代码） 链接 （图片，其它链接） 列表 （有序、无序、嵌套） 表格 ##文字_加粗、斜体、删除、微软雅黑字体、大小、颜色、分割线、段落 123456789**加粗***斜体* or _斜体_~~删除~~*注：以下为html的font语法，默认的markdown并不支持。&lt;font face=&quot;微软雅黑&quot;&gt;微软雅黑字体&lt;/font&gt;&lt;font size=&quot;2px&quot;&gt;大小&lt;/font&gt; 文字大小的单位可以是px，cm，inch等；&lt;font color=&quot;green&quot;&gt;颜色&lt;font&gt; 这里设置为绿色 也可以使蓝色 blue 红色red 或更精确丰富的 16进制值如 #873422；使用3个以上的星号、减号、底线就可以。（*注：不过这里的要求是：行内只能有以上3中，其中可以有空白，但不能包含除空格外的其它字符。）以一个空行开始，以一个空行结束，中间的就是一个段落 ##文字_引用对于简单的文字或几行代码，可以以邮件的输入方式“&gt;”来表示。引用的里面的所有markdown格式都将有效。引用里面可以再添加次级引用。例如： 1234567&gt;Dear XX,&gt;How&apos;s your going? Last week, I visted Paris. I learned some french:&gt;&gt;1.*Bonjour*;&gt;&gt;2.*Merci*;&gt;（注：这儿有一空行，退出二级引用）&gt;It&apos;s wonderful! &gt;CU soon! 效果是这样的： Dear XX,How’s your going? Last week, I visted Paris. I learned some french: 1.Bonjour;2.Merci; It’s wonderful!CU soon! ##链接Markdown支持两种风格的链接：Inline和Reference。 Inline：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用空格加”title属性”。 Reference：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为链接文本；定义部分可以出现在文本中的其他位置，格式为ref: http://some/link/address (可选的标题)。注：ref中不区分大小写。 例如：12345这是我的博客地址[My_blog](http://cthgj.me &quot;HUGO&quot;)。部分博客内容引用自[equation8][ref]。[ref]:http://equation85.github.io/blog/markdown-examples/*注：title 为可选；*注：ref其实就类似于写文章中的插入参考文献，先加入文字，再在文末添加references相关信息； 效果 这是我的博客地址My_blog。部分博客内容引用自equation8。 对于图片的链接，在中括号前加叹号即可。注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记。1234Inline示例：![banner](https://raw.githubusercontent.com/e-tomato/e-tomato.github.io/master/img/banner.jpg)Reference示例：![替代文本][pic][pic]:https://raw.githubusercontent.com/e-tomato/e-tomato.github.io/master/img/banner.jpg &quot;可选的title&quot;HTML示例：&lt;img src=&quot;https://raw.githubusercontent.com/e-tomato/e-tomato.github.io/master/img/banner.jpg&quot; alt=&quot;替代文本&quot; title=&quot;标题文本&quot; width=&quot;200&quot; /&gt; 效果： Inline示例：Reference示例： HTML示例： ##列表无序列表使用*、+或-后面加上空格来表示。有序列表使用数字加英文句号加空格表示。例如：123456789101112131415* Item 1* Item 2* Item 3+ Item 1+ Item 2+ Item 3- Item 1- Item 2- Item 31. Item 12. Item 23. Item 3 效果： Item 1 Item 2 Item 3 Item 1 Item 2 Item 3 Item 1 Item 2 Item 3 Item 1 Item 2 Item 3 ##表格 Markdown的扩展语法1234567891011Item | Value-------- | ---Computer | $1600Phone | $12Pipe | $1| Tables | Are | Cool || ------------- |:-------------:| -----:|(：表示文本位置，默认为左对齐)| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 效果 Item Value Computer $1600 Phone $12 Pipe $1 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 基本上就这些了，等需要时再更新。 最后，由于使用jacman主题，最好使用如下语法写： 12345title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: example #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[阅读书目]]></title>
      <url>%2F2015%2F05%2F13%2F%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE%2F</url>
      <content type="text"><![CDATA[《伟大的博物学家》; 《平凡的世界》； Molecular Biology: Principles of Genome Function to be continued;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2015%2F05%2F10%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
