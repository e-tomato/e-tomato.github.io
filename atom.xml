<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simple but Matters</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-01T16:55:13.087Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>e-tomato (GJ.H)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式[Regular expression]</title>
    <link href="http://yoursite.com/2017/04/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-Regular-expression/"/>
    <id>http://yoursite.com/2017/04/05/正则表达式-Regular-expression/</id>
    <published>2017-04-05T19:24:18.000Z</published>
    <updated>2017-05-01T16:55:13.087Z</updated>
    
    <content type="html"><![CDATA[<p>由于在分析数据时经常需要进行查找、匹配、替换等操作，并且不管在什么系统中都会经常遇到，因此对正则表达式的整理很有必要。</p>
<p>目前自己总结如下：</p>
<ul>
<li>正则表达式的基本模式是： <font size="3px"><font color="red"><strong>定位(Anchors)</strong>+ <strong>内容</strong> + <strong>数量(Quantifiers，重复次数)</strong></font></font></li>
<li>针对上述各模块的字符类型以及表达方式。</li>
</ul>
<hr>
<h1 id="1-基本模式"><a href="#1-基本模式" class="headerlink" title="1. 基本模式"></a>1. 基本模式</h1><h2 id="gt-定位-Anchors"><a href="#gt-定位-Anchors" class="headerlink" title="==&gt; 定位(Anchors)"></a>==&gt; 定位(Anchors)</h2><ul>
<li><h4 id="常用的定位符-也称元字符Metacharacters-如下表："><a href="#常用的定位符-也称元字符Metacharacters-如下表：" class="headerlink" title="常用的定位符(也称元字符Metacharacters)如下表："></a>常用的定位符(也称元字符Metacharacters)如下表：</h4></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">例如(<code>file=c(&quot;hello!&quot;,&quot;held on&quot;,&quot;shell&quot;,&quot;he_llo&quot;,&quot;she2hd&quot;)</code>; “==&gt;” 表示返回值)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>^</code></td>
<td style="text-align:center">字符串或行的起始(Start of the string)</td>
<td style="text-align:center">e.g. 找出以”hel” 开始的string: <code>grep(&quot;^hel&quot;,file,value=TRUE)</code> ==&gt; “hello!”  “held on”</td>
</tr>
<tr>
<td style="text-align:center"><code>$</code></td>
<td style="text-align:center">字符串或行的结尾(End of the string)</td>
<td style="text-align:center">e.g. 找出以”ell”结尾的string: <code>grep(&quot;ell$&quot;,file ,value=TRUE)</code> ==&gt; “shell”</td>
</tr>
<tr>
<td style="text-align:center"><code>\\b</code></td>
<td style="text-align:center">匹配<strong>单词</strong>的开始或结尾(Empty string at either edge of a word)</td>
<td style="text-align:center">e.g.找出以he开始，o或者d结尾的单词: <code>grep(&quot;\\bhe.*[od]\\b&quot;,file,value=TRUE)</code> ==&gt; “hello!” “held on” “he_llo”</td>
</tr>
<tr>
<td style="text-align:center"><code>\\B</code></td>
<td style="text-align:center">匹配非单词的开始或结尾(NOT the edge of a word)</td>
<td style="text-align:center">e.g.找出不以he开始的单词: <code>grep(&quot;\\Bhe&quot;,file,value=TRUE)</code> ==&gt; “shell” “she2hd”</td>
</tr>
<tr>
<td style="text-align:center"><code>\\&lt;</code></td>
<td style="text-align:center">单词开始(Beginning of a word)</td>
<td style="text-align:center">e.g. 找出以s开始的单词: <code>grep(&quot;\\&lt;s&quot;,file,value=TRUE)</code>==&gt; “shell” “she2hd”</td>
</tr>
<tr>
<td style="text-align:center"><code>\\&gt;</code></td>
<td style="text-align:center">单词结束(End of a word)</td>
<td style="text-align:center">e.g. 找出以h开始，以d或者o结尾的单词: <code>grep(&quot;\\&lt;h.*[do]\\&gt;&quot;,file,value=TRUE)</code> ==&gt; “hello!” “held on” “he_llo”</td>
</tr>
<tr>
<td style="text-align:center"><code>\\s</code></td>
<td style="text-align:center">匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等</td>
<td style="text-align:center">e.g. 找出以任何内容开始，中间含有空格，然后以n结尾的单词:<code>grep(&quot;.*\\s.*n\\b&quot;,file,value=TRUE)</code> ==&gt; “held on”</td>
</tr>
<tr>
<td style="text-align:center"><code>\\w</code></td>
<td style="text-align:center">匹配字母或数字或下划线或汉字等</td>
<td style="text-align:center">e.g. 找出以s开头的任何词: <code>grep(&quot;\\&lt;she\\w*\\&gt;&quot;,file,value=TRUE)</code> ==&gt; “shell”  “she2hd”</td>
</tr>
<tr>
<td style="text-align:center"><code>\\d</code></td>
<td style="text-align:center">匹配数字</td>
<td style="text-align:center">e.g. 找出含有数字+h的词: <code>grep(&quot;\\dh&quot;,file,value=TRUE)</code> ==&gt; “she2hd”</td>
</tr>
</tbody>
</table>
<p><strong> <em>注意：</em></strong></p>
<ol>
<li>以<code>\\b</code>, <code>\\&gt;</code>结尾时，匹配内容 都是写在这些字符之前而不是之后。</li>
<li>凡是匹配，为了更加精确尽量把匹配内容都表示完。</li>
</ol>
<h2 id="gt-内容"><a href="#gt-内容" class="headerlink" title="==&gt; 内容"></a>==&gt; 内容</h2><ul>
<li><h4 id="字符类型："><a href="#字符类型：" class="headerlink" title="字符类型："></a>字符类型：</h4></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">例如(<code>file2=c(&quot;hello!&quot;,&quot;(+33) 06 35 89 75&quot;,&quot;023-6589&quot;,&quot;89he_llo&quot;,&quot;(001)+she2hd&quot;)</code>; “==&gt;” 表示返回值)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>[[:digit:]]</code>=<code>\\d</code>=<code>[0-9]</code></td>
<td style="text-align:center">匹配含有(特定)数字的项</td>
<td style="text-align:center">e.g. 含0-2的项: <code>grep(&quot;[0-2]&quot;,file2,value=TRUE)</code> ==&gt; “(+33) 06 35 89 75” “023-6589” “(001)+she2hd”</td>
</tr>
<tr>
<td style="text-align:center"><code>\\D</code>=<code>[^0-9]</code></td>
<td style="text-align:center">匹配含有非(特定)数字的项(<strong>不是指 不含有数字</strong>)</td>
<td style="text-align:center">e.g. <code>grep(&quot;[^0-2]&quot;,file2,value=TRUE)</code> ==&gt; “hello!” “(+33) 06 35 89 75” “023-6589” “89he_llo” “(001)+she2hd”</td>
</tr>
<tr>
<td style="text-align:center"><code>[[:lower:]]</code>=<code>[a-z]</code></td>
<td style="text-align:center">匹配含有小写字母的项</td>
<td style="text-align:center">e.g. 含b-m的项: <code>grep(&quot;[b-m]&quot;,file2,value=TRUE)</code> ==&gt; “hello!” “89he_llo” “(001)+she2hd”</td>
</tr>
<tr>
<td style="text-align:center"><code>[[:upper:]]</code>=<code>[A-Z]</code></td>
<td style="text-align:center">匹配含有大写字母的项</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>[[:alpha:]]</code>=<code>[A-z]</code></td>
<td style="text-align:center">匹配含有小写字母的项</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>[[:alnum:]]</code>=<code>[A-z0-9]</code></td>
<td style="text-align:center">匹配含有数字+字母的项</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>\\w</code>=`[A-z0-9_]</td>
<td style="text-align:center">匹配单词(word characters)</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>\\W</code></td>
<td style="text-align:center">匹配非单词(Non-word characters)</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>[[:xdigit:]]</code>=<code>\\x</code>=<code>[0-9A-Fa-f]</code></td>
<td style="text-align:center">十六进制(hexadec.digits)</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>[[:blank:]]</code></td>
<td style="text-align:center">Space and tab</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>[[:space:]]</code>=<code>\\s</code></td>
<td style="text-align:center">Space, tab, vertical tab, newline, formfeed, carriage return</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>\\S</code>=`[^[:space:]]</td>
<td style="text-align:center">非空格 Not space</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>[[:punct:]]</code></td>
<td style="text-align:center">Punctuation characters includes: !”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{}~</td>
<td style="text-align:center">e.g.</td>
</tr>
</tbody>
</table>
<ul>
<li><h4 id="转义字符："><a href="#转义字符：" class="headerlink" title="转义字符："></a>转义字符：</h4></li>
</ul>
<p>当我们查找元字符本身，如<code>,</code> 或者<code>*</code>。你没办法指定它们，因为它们会被解释成别的意思。这时就得使用\来取消这些字符的特殊意义。因此，你应该使用<code>\\,</code>和<code>\\*</code>。当然，要查找\本身，你也得用<code>\\\</code>。例如：rstudio<code>\\</code>.com匹配rstudio.com，tmp<code>\\\</code>files匹配tmp\files。需要转义的字符如下: <strong> <font size="3px"> <font color="red">“!#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{|}~”</font></font></strong> 也即是上述的punctuation 字符。</p>
<ul>
<li><h4 id="条件限定方式："><a href="#条件限定方式：" class="headerlink" title="条件限定方式："></a>条件限定方式：</h4></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">例如</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>.</code></td>
<td style="text-align:center">除换行符(\n)外的任何字符</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>竖线</code></td>
<td style="text-align:center">或 (含有不同模式时，先写各模式再用竖线分开)</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>[...]</code></td>
<td style="text-align:center">允许的字符类型或者范围都被中括号包围</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>[a-z]</code></td>
<td style="text-align:center">- 用以表示范围</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>[^...]</code></td>
<td style="text-align:center">^ 用以排除范围</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>(...)</code></td>
<td style="text-align:center">小括号用以表示分组：Grouping, enables back referencing using \N where N is an integer</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>{...}</code></td>
<td style="text-align:center">大括号用以表示重复范围</td>
<td style="text-align:center">e.g.</td>
</tr>
</tbody>
</table>
<h2 id="gt-数量"><a href="#gt-数量" class="headerlink" title="==&gt; 数量"></a>==&gt; 数量</h2><ul>
<li><h4 id="常规类型："><a href="#常规类型：" class="headerlink" title="常规类型："></a>常规类型：</h4></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">例如</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>*</code></td>
<td style="text-align:center">匹配至少0次</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>+</code></td>
<td style="text-align:center">匹配至少一次</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>？</code></td>
<td style="text-align:center">匹配最多一次</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>{n}</code></td>
<td style="text-align:center">匹配确切的n次</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>{n,}</code></td>
<td style="text-align:center">匹配至少n次</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>{,n}</code></td>
<td style="text-align:center">匹配最多n次</td>
<td style="text-align:center">e.g.</td>
</tr>
<tr>
<td style="text-align:center"><code>{n,m}</code></td>
<td style="text-align:center">匹配n至m次</td>
<td style="text-align:center">e.g.</td>
</tr>
</tbody>
</table>
<ul>
<li><h4 id="贪婪与懒惰匹配："><a href="#贪婪与懒惰匹配：" class="headerlink" title="贪婪与懒惰匹配："></a>贪婪与懒惰匹配：</h4></li>
</ul>
<p><strong>贪婪(Greedy):</strong> 匹配尽可能多的字符。e.g. a.*b, 它将会匹配最长的以a开始，以b结束的字符串。grep(“a.*b”,”aabab”,value=TRUE) ==&gt; “aabab”  它会匹配整个字符串aabab。<br><strong>懒惰(Lazy):</strong> 匹配尽可能少的字符。采取的方式是在在之前贪婪模式下加上?即可。a.*?b匹配最短的，以a开始，以b结束的字符串。针对aabab，匹配位置为aab(第一到第三个字符)和ab (第四到第五个字符)</p>
<h1 id="2-常用模式匹配的function"><a href="#2-常用模式匹配的function" class="headerlink" title="2. 常用模式匹配的function"></a>2. 常用模式匹配的function</h1><p>带模式匹配的常用function有已下四种类型：<br>匹配(Detect pattern), 定位(Locate pattern), 提取(Extract pattern), 替代(Replace pattern)<br>具体见下图：<br><img src="/uploads/Functions_for_pattern_matching.jpg" alt="Functions"></p>
<hr>
<p>PS: 针对以上, 可以搜索<a href="https://www.rstudio.com/wp-content/uploads/2016/09/RegExCheatsheet.pdf" target="_blank" rel="external"><font color="blue"><strong>参考PDF</strong></font></a> R regular expression cheatsheet. </p>
]]></content>
    
    <summary type="html">
    
      重复多遍的工作最好还是整理一下，方便自己再次查看，本文旨在总结R中常用的正则表达方式。
    
    </summary>
    
      <category term="数据分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="regExp" scheme="http://yoursite.com/tags/regExp/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="grep" scheme="http://yoursite.com/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>Summary of git and hexo for my web</title>
    <link href="http://yoursite.com/2017/03/27/Summary-of-git-and-hexo-for-my-web/"/>
    <id>http://yoursite.com/2017/03/27/Summary-of-git-and-hexo-for-my-web/</id>
    <published>2017-03-27T20:49:29.000Z</published>
    <updated>2017-03-28T19:53:50.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Protocol如下："><a href="#Protocol如下：" class="headerlink" title="Protocol如下："></a>Protocol如下：</h1><hr>
<h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h2><ul>
<li><p><strong>A.</strong> 按hexo网站下载必需的软件 (包括<a href="http://git-scm.com/" target="_blank" rel="external">git</a>和 <a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>) … &gt; … &gt; …&gt;。</p>
</li>
<li><p><strong>B.</strong> 根据theme修改主体的_config.yml以及主题的_config.yml文件 (参考网站：<a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">博客搭建</a>，<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next</a>).然后不停的改配置，不停的改，直到自己满意为止。</p>
</li>
<li><p><strong>C.</strong> 连接GitHub分支通过Git (in bash)。</p>
<blockquote>
<p><strong>a)</strong> 本地创建公钥(public key)(参考<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">github帮助</a>);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -b 4096 -C &quot;xxx@gmail.com&quot; # xxx为注册邮箱地址</div></pre></td></tr></table></figure>
<p><strong>b)</strong> 此时在windows user/.ssh目录下会生成两个文件，id_rsa.pub和id_rsa(<em>提示输入的密码不一定非得是github的密码</em>);<br><strong>c)</strong> 登陆github，在<a href="https://github.com/settings/keys" target="_blank" rel="external">SSH设置页面</a>添加上刚才的public key文件也就是<strong>id_rsa.pub</strong>的内容即可.<br><strong>注意：</strong>如果忘记了id_sra.pub的位置就重新生成新的key，具体参考github帮助(<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">点此</a> 还有<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="external">此</a>)，然后删掉旧的SSH key。</p>
</blockquote>
</li>
<li><p><strong>D.</strong> 由于hexo deploy有时无法push到远程repo上去。所以还是用git来更新blog。</p>
<blockquote>
<p><strong>a)</strong> clone自己的repo (git bash)：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /d/On-learning/Github/hexo/my_blog/</div><div class="line">git clone https://github.com/e-tomato/e-tomato.github.io.git .deploy/e-tomato.github.io</div><div class="line"># .deploy 文件的内容即是blog所需要的内容</div></pre></td></tr></table></figure>
<p><strong>b)</strong> 在hexo中生成博客，复制public文件下的所有内容至 .deploy/e-tomato.github.io下，然后用git命令来更新修改或删除博客内容。以下是shell脚本deply.sh的内容：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">hexo generate</div><div class="line">cp -R ../public/* .deploy/e-tomato.github.io</div><div class="line">cd .deploy/e-tomato.github.io</div><div class="line">git add .</div><div class="line">git commit -m “update”</div><div class="line">git push origin master</div><div class="line">## 如果是删除文件： git rm xx ==&gt; git commit -m &quot;delete xx&quot; ==&gt;git push origin master;</div></pre></td></tr></table></figure>
<p>部署过程中可能需要输入Github账户的用户名及密码，按照提示操作即可。</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="2-写博客"><a href="#2-写博客" class="headerlink" title="2. 写博客"></a>2. 写博客</h2><ul>
<li><p><strong>A.</strong> 创建新博客 (md文件位于hexo/source/_posts/下)</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;title&quot;</div></pre></td></tr></table></figure>
<p>博客格式如下(尽量给每篇文章加tags，逗号分隔)</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: Summary of git and hexo for my web</div><div class="line">date: 2017-03-27 22:49:29</div><div class="line">tags: hexo</div><div class="line">comments: false</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><strong>B.</strong> 如果需要备份，复制该文件至my_blog/drafts.md/下进行修改，等完成后再发布。</p>
</li>
<li><p><strong>C.</strong> 生成博客:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate # 或者 hexo g</div></pre></td></tr></table></figure>
</li>
<li><p><strong>D.</strong> 本地查看<a href="http://localhost:4000" target="_blank" rel="external">localhost:4000</a>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server # 或者直接 hexo s</div></pre></td></tr></table></figure>
</li>
<li><p><strong>E.</strong> 部署到网站:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div><div class="line">##不行的话就用之前deploy.sh</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="THE-END"><a href="#THE-END" class="headerlink" title="THE END"></a>THE END</h1><hr>
]]></content>
    
    <summary type="html">
    
      这篇文章记录下blog生成的过程，不复杂，但就是容易忘。
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>概率统计学习-My Questionnaire</title>
    <link href="http://yoursite.com/2015/06/06/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://yoursite.com/2015/06/06/概率统计学习-一/</id>
    <published>2015-06-06T15:25:43.000Z</published>
    <updated>2015-07-02T20:47:51.822Z</updated>
    
    <content type="html"><![CDATA[<p>刚在看吴喜之教授的《统计学：从数据到结论》中发现很多以前没想到的很有意思的概念。</p>
<p><strong>Questionnaire</strong>，我以前一直只认为它是市场营销类的专业词。其实，对各个需要得到数据的科学领域，这个表是引导获取原始数据的最关键环节，更是引导深入分析的支持点。基于个人的理解，一份questionnaire应该需要这些思路：</p>
<ul>
<li>对于单基因的研究<ol>
<li>获得该基因的所有能获得的背景信息（包括基因序列，保守结构域分析，表达谱，定位分析，进化分析，启动子分析，同源基因功能备注等等），准备制作问卷表；</li>
<li>根据突变缺失或超表达（研究单基因必需的步骤），问在哪些组织具有表型（这个通常不会太多，一般只是几个focus），分类分层次，标定为N个tissue.level；</li>
<li>在不同tissue.level上，非正常/正常值比例（显著吗？），非正常值在器官和细胞层次的不同指标（这个得需要寻找类似研究作参考）的变化。同样分层次，标定为N个organ.level和cell.level<br>（如观察到花出现表型，多少花不正常？不正常的花出现在哪些位置？各个花器官数量是多少？各花器官的大小是否发生变化？分化出该器官的花的细胞数量是否发生变化？细胞位置，细胞大小，形态等是否发生变化？等等）</li>
<li>基于不同level下的表型，寻找，分析，推断可能的具有关联性的基因（关联性包括上游，下游，平等）。如果文献支撑强的话，问：我找到的这些基因是否可以具有这种关系，是哪种关系？然后就可以直接试验（包括转录和蛋白水平的检测，DNA蛋白互作，蛋白互作等）；如果无法顺利找到时，而花费又允许的情况下，问是否可以用RNA-seq 差异基因检测，ChIP-seq结合DNA检测，蛋白质差异检测？</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      算是读书笔记吧。还是有一定意义。但分析的层次依旧不够。
    
    </summary>
    
      <category term="统计与R" scheme="http://yoursite.com/categories/%E7%BB%9F%E8%AE%A1%E4%B8%8ER/"/>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="数据分析" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="统计学" scheme="http://yoursite.com/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>随机抽样中覆盖率、重复率概率分析</title>
    <link href="http://yoursite.com/2015/05/21/%E9%9A%8F%E6%9C%BA%E6%8A%BD%E6%A0%B7%E4%B8%AD%E8%A6%86%E7%9B%96%E7%8E%87%E3%80%81%E9%87%8D%E5%A4%8D%E7%8E%87%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2015/05/21/随机抽样中覆盖率、重复率概率分析/</id>
    <published>2015-05-21T14:42:05.000Z</published>
    <updated>2015-07-02T20:47:01.231Z</updated>
    
    <content type="html"><![CDATA[<p>问题1：从标有1-10号的球中，每次随机有放回的抽取10个球，至少重复多少次能把全部10个数字抽取完？每次试验100次，计算覆盖率的均值作为一次试验的结果。然后统计1个100次试验~1000个100次试验的覆盖率的plot图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">x&lt;-c()</div><div class="line">coverge&lt;-c()</div><div class="line">mean.cov &lt;-c()</div><div class="line"></div><div class="line">for (m in 1:1000)</div><div class="line">&#123; x[m]&lt;-m</div><div class="line">  for (n in 1:100)</div><div class="line">  &#123;</div><div class="line">    coverge[n]&lt;-length(levels(factor(sample(1:10,10,replace=T))))/10</div><div class="line">  &#125;</div><div class="line">  mean.cov[m] &lt;- mean(coverge)</div><div class="line">&#125;</div><div class="line"></div><div class="line">x</div><div class="line">summary(mean.cov)</div><div class="line">plot(x,mean.cov)</div></pre></td></tr></table></figure></p>
<ul>
<li>所以，1000次试验，覆盖率的均值基本不会变化(都在61.4~68.1%)。即单纯的重复有限次抽取并不能保证都抽到。（限制因子有：单次抽取的球的个数（10个，越多自然能得到更高覆盖率）、样本容量size（10个球，5个则是84.6%~92.8%，6个则是80%~88%，7个则是75%~82%，8个则是71%~77%，9个则是65%~73%）</li>
</ul>
<p>问题2：同上，单个数字被平均重复抽取多少次时，可以把10个数字抽完？每次试验100次，计算覆盖率的均值作为一次试验的结果，计算数字重复次数的均值作为一次试验的结果。然后统计1个100次试验~1000个100次试验的覆盖率和深度的plot图。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">x&lt;-c()</div><div class="line">coverge&lt;-c()</div><div class="line">mean.cov &lt;-c()</div><div class="line">mean.dep &lt;-c()</div><div class="line">dep.aver &lt;-c()</div><div class="line">sample &lt;-c()</div><div class="line">for (m in 1:1000)</div><div class="line">&#123; x[m]&lt;-m</div><div class="line">  for (n in 1:100)</div><div class="line">  &#123;</div><div class="line">    sample&lt;-sample(1:10,10,replace=T)</div><div class="line">    dep.aver[n] &lt;-mean(summary(factor(sample)))</div><div class="line">    coverge[n]&lt;-length(levels(factor(sample)))/10</div><div class="line">  &#125;</div><div class="line">  mean.dep[m]&lt;- mean(dep.aver)</div><div class="line">  mean.cov[m] &lt;- mean(coverge)</div><div class="line">&#125;</div><div class="line"></div><div class="line">x</div><div class="line">summary(mean.cov)</div><div class="line">summary(mean.dep)</div><div class="line">plot(mean.dep,mean.cov)</div></pre></td></tr></table></figure>
<ul>
<li>所以，1000次试验中，无论怎样，覆盖率的均值基本不会变化(都在62.0~68.6%，也即是上问的结果：即单纯的重复有限次抽取并不能保证全部都抽到。)；同时，虽然深度和覆盖率呈线性负相关性，但在单纯的重复有限次抽取情况下根本不可能本质上的增加深度（本例中，mean.dep=（1.491，1.658）。而是，深度与抽取次数相关。如果我一次性有放回抽取的是20个，那么，覆盖率范围变大（84.3%~90.6%），深度变为（2.227~2.403）。</li>
</ul>
<p>问题3：从标有1-10号的球中，仅限抽取一次，随机抽取多少个球能把10个数字全部抽完？试验100次，每次取平均值，得到plot图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">x&lt;-c()</div><div class="line">coverge&lt;-c()</div><div class="line">mean.cov &lt;-c()</div><div class="line">for (m in 1:50)</div><div class="line">&#123; x[m]&lt;-m</div><div class="line">  for (n in 1:100)</div><div class="line">  &#123;</div><div class="line">    coverge[n]&lt;-length(levels(factor(sample(1:10,m,replace=T))))/10</div><div class="line">  &#125;</div><div class="line">  mean.cov[m] &lt;- mean(coverge)</div><div class="line">&#125;</div><div class="line"></div><div class="line">x</div><div class="line">coverge</div><div class="line">plot(x,mean.cov)</div></pre></td></tr></table></figure></p>
<ul>
<li>所以，约20~30次计数抽取即可覆盖80%~90%的号。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      10标有号的球，不同抽取方法，类比测序。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>R基本命令(不完全记录)</title>
    <link href="http://yoursite.com/2015/05/19/R%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%AE%B0%E5%BD%95%EF%BC%89/"/>
    <id>http://yoursite.com/2015/05/19/R基本命令-不完全记录）/</id>
    <published>2015-05-19T21:36:07.000Z</published>
    <updated>2017-03-28T20:45:18.755Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <a href="http://rmarkdown.rstudio.com" target="_blank" rel="external">http://rmarkdown.rstudio.com</a>.</p><p></p>
<p></p><p>When you click the <strong>Knit</strong> button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. </p>
<p></p><p>查看getwd()当前工作路径;设定setwd()工作路径;</p><p></p>
<pre class="r"><code>getwd()</code></pre>
<pre><code>## [1] &quot;D:/On-learning/R&amp;Statistic_life_science/R_basics&quot;</code></pre>
<pre class="r"><code>setwd(&quot;D:/On-learning/R&amp;Statistic_life_science/R_basics/&quot;) </code></pre>
<p>下载数据。需要downloader包，download语法如下： download(“<a href="https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/" target="_blank" rel="external">https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/</a>”,“msleep_ggplot2.csv”)</p>
<p>导入数据。对于不同的类型的数据格式需用不同的导入函数，一般是read.table, read.csv, read.dataframe… 如果数据表格中没有标题行，则需加入 header=FASLE，数据中的每列标题则是V1，V2…等，可以用df$V1等取子集；默认包含标题，标题行是第一行。</p>
<pre class="r"><code>df &lt;- read.csv(&quot;msleep_ggplot2.csv&quot;, header = TRUE)</code></pre>
<p>查看数据基本信息：head，tail，dim，summary，typeof等。</p>
<pre class="r"><code>head(df) #表头</code></pre>
<pre><code>##                         name      genus  vore        order conservation
## 1                    Cheetah   Acinonyx carni    Carnivora           lc
## 2                 Owl monkey      Aotus  omni     Primates         &lt;NA&gt;
## 3            Mountain beaver Aplodontia herbi     Rodentia           nt
## 4 Greater short-tailed shrew    Blarina  omni Soricomorpha           lc
## 5                        Cow        Bos herbi Artiodactyla domesticated
## 6           Three-toed sloth   Bradypus herbi       Pilosa         &lt;NA&gt;
##   sleep_total sleep_rem sleep_cycle awake brainwt  bodywt
## 1        12.1        NA          NA  11.9      NA  50.000
## 2        17.0       1.8          NA   7.0 0.01550   0.480
## 3        14.4       2.4          NA   9.6      NA   1.350
## 4        14.9       2.3   0.1333333   9.1 0.00029   0.019
## 5         4.0       0.7   0.6666667  20.0 0.42300 600.000
## 6        14.4       2.2   0.7666667   9.6      NA   3.850</code></pre>
<pre class="r"><code>dim(df)</code></pre>
<pre><code>## [1] 83 11</code></pre>
<pre class="r"><code>summary(df$sleep_total)</code></pre>
<pre><code>##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    1.90    7.85   10.10   10.43   13.75   19.90</code></pre>

<p></p><p>对导入的数据进行筛选，排查，标准化</p><p></p>
<p></p><p>对部分数据进行分析时，需要取子集[]。常用的是某行/列，连续或指定的几行/几列，满足条件的行/列；</p><p></p>
<pre class="r"><code>df.head.5 &lt;-df[c(1:5),] #对前五行取子集,等同于head(df,5)。构建一个向量指定具体行，如c(2,3,6,7)
df.any.3 &lt;- df[sample(1:11,3,replace=F),] #对任意（非重复）3行取子集
df.high.sleep &lt;-df[df$sleep_total &gt;18,] #df$sleep_total&gt;=18即是一个逻辑值组成的向量，表示所有满足条件的行。【通过逻辑值得到数值数据】
df.highest.sleep &lt;- df[df$sleep_total==max(df$sleep_total,na.rm=T),] #去除na值之后，取sleep_total值为最大的那一行。
mean(df[df$sleep_total&gt;18,]$sleep_total) #计算sleep_total大于18的平均值。</code></pre>
<pre><code>## [1] 19.275</code></pre>
<p>对向量vector的几种常用操作。包括查找(which,match)，排序(sort, order, rank) #which</p>
<pre class="r"><code>which(df$sleep_total&gt;18) #得到满足条件的**行号**！注意，是**行号**！组成数字索引(numeric index)。然后获得相应行的所有信息，即可用：</code></pre>
<pre><code>## [1] 22 37 43 62</code></pre>
<pre class="r"><code>df[which(df$sleep_total&gt;18),] #效果其实跟df[df$sleep_total &gt;18,]是一样的。**which**意思即是得到满足条件的**那些行号**。</code></pre>
<pre><code>##                    name      genus    vore           order conservation
## 22        Big brown bat  Eptesicus insecti      Chiroptera           lc
## 37 Thick-tailed opposum Lutreolina   carni Didelphimorphia           lc
## 43     Little brown bat     Myotis insecti      Chiroptera         &lt;NA&gt;
## 62      Giant armadillo Priodontes insecti       Cingulata           en
##    sleep_total sleep_rem sleep_cycle awake brainwt bodywt
## 22        19.7       3.9   0.1166667   4.3 0.00030  0.023
## 37        19.4       6.6          NA   4.6      NA  0.370
## 43        19.9       2.0   0.2000000   4.1 0.00025  0.010
## 62        18.1       6.1          NA   5.9 0.08100 60.000</code></pre>
<pre class="r"><code>df$sleep_total[which(df$sleep_total &gt;18)[1]] #获得满足条件的第一行</code></pre>
<pre><code>## [1] 19.7</code></pre>
<pre class="r"><code>df.median.sleep&lt;-df[which(df$sleep_total &gt; quantile(df$sleep_total,probs = 50/100) &amp; df$sleep_rem&lt;3),]
df.median.herbi&lt;-df[which(df$sleep_total &gt; quantile(df$sleep_total,probs = 50/100) &amp; df$vore==&quot;herbi&quot;),] #herbi中，输出sleep_total前50%的行信息。</code></pre>
<p>三种排序方式 sort</p>
<pre class="r"><code>sort(df$sleep_total) #得到满足条件的**值**！注意，这里是**值**！组成数字向量numeric values。</code></pre>
<pre><code>##  [1]  1.9  2.7  2.9  3.0  3.1  3.3  3.5  3.8  3.9  4.0  4.4  5.2  5.3  5.3
## [15]  5.4  5.6  6.2  6.3  6.3  7.0  7.7  8.0  8.3  8.4  8.4  8.6  8.7  8.7
## [29]  8.9  9.1  9.1  9.4  9.4  9.5  9.6  9.7  9.8  9.8 10.0 10.1 10.1 10.1
## [43] 10.3 10.3 10.4 10.6 10.9 11.0 11.0 11.1 11.3 11.5 12.1 12.5 12.5 12.5
## [57] 12.5 12.8 12.8 13.0 13.5 13.7 13.8 14.2 14.3 14.4 14.4 14.5 14.6 14.9
## [71] 14.9 15.6 15.8 15.8 15.9 16.6 17.0 17.4 18.0 18.1 19.4 19.7 19.9</code></pre>
<pre class="r"><code>#查看df[sort(df$sleep_total),]$sleep_total与sort(df$sleep_total)的值是不同的。</code></pre>
<p>order</p>
<pre class="r"><code>order(df$sleep_total) #得到满足条件的**行号**！注意，是**行号**！组成数字索引(numeric index)。</code></pre>
<pre><code>##  [1] 30 31 23 10 24 36 59 49 21  5 77 80 11 19 63 60 32 33 81  8 46 34 16
## [24] 48 67 75  7 65 79 17 74 12 54 35 66 50 29 83 13  9 25 38 15 55 52 69
## [47] 26 45 56 61 68 57  1 14 28 42 82 41 73 64 53 58 71 39 40  3  6 47 44
## [70]  4 27 78 51 76 72 70  2 18 20 62 37 22 43</code></pre>
<pre class="r"><code>#df[order(df$sleep_total),]$sleep_total与sort(df$sleep_total)的值是相同的。</code></pre>
<p>rank</p>
<pre class="r"><code>rank(df$sleep_total) #给个值排名，得到的是一个数值向量。</code></pre>
<pre><code>##  [1] 53.0 77.0 66.5 70.5 10.0 66.5 27.5 20.0 41.0  4.0 13.5 32.5 39.0 55.5
## [15] 43.5 23.0 30.5 78.0 13.5 79.0  9.0 82.0  3.0  5.0 41.0 47.0 70.5 55.5
## [29] 37.5  1.0  2.0 17.0 18.5 22.0 34.0  6.0 81.0 41.0 64.0 65.0 58.5 55.5
## [43] 83.0 69.0 48.5 21.0 68.0 24.5  8.0 36.0 73.5 45.0 61.0 32.5 43.5 48.5
## [57] 52.0 62.0  7.0 16.0 50.0 80.0 15.0 60.0 27.5 35.0 24.5 51.0 46.0 76.0
## [71] 63.0 75.0 58.5 30.5 26.0 73.5 11.0 72.0 29.0 12.0 18.5 55.5 37.5</code></pre>
<pre class="r"><code>rank(c(1,2,2,3))</code></pre>
<pre><code>## [1] 1.0 2.5 2.5 4.0</code></pre>
<pre class="r"><code>#结果为[1] 1.0 2.5 2.5 4.0，共四个，两个并列第2.5</code></pre>
<p>match</p>
<pre class="r"><code>match(c(&quot;Cow&quot;,&quot;Owl monkey&quot;,&quot;Cheetah&quot;),df$name) #得到满足条件的**行号**！注意，是**行号**！组成数字索引(numeric index)。然后获得相应行的所有信息，即可用</code></pre>
<pre><code>## [1] 5 2 1</code></pre>
<pre class="r"><code>df[match(c(&quot;Cow&quot;,&quot;Owl monkey&quot;,&quot;Cheetah&quot;),df$name),] </code></pre>
<pre><code>##         name    genus  vore        order conservation sleep_total
## 5        Cow      Bos herbi Artiodactyla domesticated         4.0
## 2 Owl monkey    Aotus  omni     Primates         &lt;NA&gt;        17.0
## 1    Cheetah Acinonyx carni    Carnivora           lc        12.1
##   sleep_rem sleep_cycle awake brainwt bodywt
## 5       0.7   0.6666667  20.0  0.4230 600.00
## 2       1.8          NA   7.0  0.0155   0.48
## 1        NA          NA  11.9      NA  50.00</code></pre>
<p>数据的组合grouping data factor: factor是把字符型向量转换成整数储存在，但同时具有levels属性，即用levels来分类。没有理解到。</p>
<pre class="r"><code>vec = c(&quot;red&quot;,&quot;blue&quot;,&quot;red&quot;,&quot;green&quot;,&quot;green&quot;,&quot;yellow&quot;,&quot;orange&quot;)
fac = factor(vec)
fac</code></pre>
<pre><code>## [1] red    blue   red    green  green  yellow orange
## Levels: blue green orange red yellow</code></pre>
<pre class="r"><code>levels(fac)</code></pre>
<pre><code>## [1] &quot;blue&quot;   &quot;green&quot;  &quot;orange&quot; &quot;red&quot;    &quot;yellow&quot;</code></pre>
<p>table</p>
<pre class="r"><code>levels(df$order)</code></pre>
<pre><code>##  [1] &quot;Afrosoricida&quot;    &quot;Artiodactyla&quot;    &quot;Carnivora&quot;      
##  [4] &quot;Cetacea&quot;         &quot;Chiroptera&quot;      &quot;Cingulata&quot;      
##  [7] &quot;Didelphimorphia&quot; &quot;Diprotodontia&quot;   &quot;quot;Erinaceomorpha&quot; 
## [10] &quot;Hyracoidea&quot;      &quot;Lagomorpha&quot;      &quot;Monotremata&quot;    
## [13] &quot;Perissodactyla&quot;  &quot;Pilosa&quot;          &quot;Primates&quot;       
## [16] &quot;Proboscidea&quot;     &quot;Rodentia&quot;        &quot;Scandentia&quot;     
## [19] &quot;Soricomorpha&quot;</code></pre>
<pre class="r"><code>table(df$order) #统计出每个因子的个数</code></pre>
<pre><code>## 
##    Afrosoricida    Artiodactyla       Carnivora         Cetacea 
##               1               6              12               3 
##      Chiroptera       Cingulata Didelphimorphia   Diprotodontia 
##               2               2               2               2 
##  Erinaceomorpha      Hyracoidea      Lagomorpha     Monotremata 
##               2               3               1               1 
##  Perissodactyla          Pilosa        Primates     Proboscidea 
##               3               1              12               2 
##        Rodentia      Scandentia    Soricomorpha 
##              22               1               5</code></pre>
<p>split</p>
<pre class="r"><code>s&lt;-split(df$sleep_total,df$order) #把表格分列成list，这个list里面包含了所有分列出的表
s #通过length(s)可以查看分列出19个表格。</code></pre>
<pre><code>## $Afrosoricida
## [1] 15.6
## 
## $Artiodactyla
## [1] 4.0 3.0 5.3 1.9 3.8 9.1
## 
## $Carnivora
##  [1] 12.1  8.7 10.1 12.5  6.2 15.8 10.4 13.5  3.5  6.3 12.5  9.8
## 
## $Cetacea
## [1] 2.7 5.6 5.2
## 
## $Chiroptera
## [1] 19.7 19.9
## 
## $Cingulata
## [1] 17.4 18.1
## 
## $Didelphimorphia
## [1] 18.0 19.4
## 
## $Diprotodontia
## [1] 13.7 11.1
## 
## $Erinaceomorpha
## [1] 10.1 10.3
## 
## $Hyracoidea
## [1] 5.3 6.3 5.4
## 
## $Lagomorpha
## [1] 8.4
## 
## $Monotremata
## [1] 8.6
## 
## $Perissodactyla
## [1] 2.9 3.1 4.4
## 
## $Pilosa
## [1] 14.4
## 
## $Primates
##  [1] 17.0 10.0 10.9  9.8  8.0  9.5 10.1 11.0  9.7  9.4 11.0  9.6
## 
## $Proboscidea
## [1] 3.9 3.3
## 
## $Rodentia
##  [1] 14.4  7.0  9.4 12.5  8.3 14.9 14.2 14.3 12.8 12.5 14.6  7.7 14.5 11.5
## [15] 13.0  8.7 11.3 10.6 16.6 13.8 15.9 15.8
## 
## $Scandentia
## [1] 8.9
## 
## $Soricomorpha
## [1] 14.9 10.3  9.1  8.4 12.8</code></pre>
<pre class="r"><code>s[[1]]</code></pre>
<pre><code>## [1] 15.6</code></pre>
<pre class="r"><code>mean(s[[&quot;Rodentia&quot;]]) #查找某一类时，只能用[[]]符号，如果是字符型则需加&quot;&quot;。</code></pre>
<pre><code>## [1] 12.46818</code></pre>
<p>lapply,sapply, tapply</p>
<pre class="r"><code>lapply(s,mean) #laaply指对list使用，输出为一个list。这个命令可以高效的做同时运算。</code></pre>
<pre><code>## $Afrosoricida
## [1] 15.6
## 
## $Artiodactyla
## [1] 4.516667
## 
## $Carnivora
## [1] 10.11667
## 
## $Cetacea
## [1] 4.5
## 
## $Chiroptera
## [1] 19.8
## 
## $Cingulata
## [1] 17.75
## 
## $Didelphimorphia
## [1] 18.7
## 
## $Diprotodontia
## [1] 12.4
## 
## $Erinaceomorpha
## [1] 10.2
## 
## $Hyracoidea
## [1] 5.666667
## 
## $Lagomorpha
## [1] 8.4
## 
## $Monotremata
## [1] 8.6
## 
## $Perissodactyla
## [1] 3.466667
## 
## $Pilosa
## [1] 14.4
## 
## $Primates
## [1] 10.5
## 
## $Proboscidea
## [1] 3.6
## 
## $Rodentia
## [1] 12.46818
## 
## $Scandentia
## [1] 8.9
## 
## $Soricomorpha
## [1] 11.1</code></pre>
<pre class="r"><code>sapply(s,mean) #“similify”，原理同上，但是输出的结果直接是一个vector。</code></pre>
<pre><code>##    Afrosoricida    Artiodactyla       Carnivora         Cetacea 
##       15.600000        4.516667       10.116667        4.500000 
##      Chiroptera       Cingulata Didelphimorphia   Diprotodontia 
##       19.800000       17.750000       18.700000       12.400000 
##  Erinaceomorpha      Hyracoidea      Lagomorpha     Monotremata 
##       10.200000        5.666667        8.400000        8.600000 
##  Perissodactyla          Pilosa        Primates     Proboscidea 
##        3.466667       14.400000       10.500000        3.600000 
##        Rodentia      Scandentia    Soricomorpha 
##       12.468182        8.900000       11.100000</code></pre>
<pre class="r"><code>tapply(df$sleep_total,df$order,mean) #综合了split和sapply，直接输入指定参数，输出目的值并保存于向量中。</code></pre>
<pre><code>##    Afrosoricida    Artiodactyla       Carnivora         Cetacea 
##       15.600000        4.516667       10.116667        4.500000 
##      Chiroptera       Cingulata Didelphimorphia   Diprotodontia 
##       19.800000       17.750000       18.700000       12.400000 
##  Erinaceomorpha      Hyracoidea      Lagomorpha     Monotremata 
##       10.200000        5.666667        8.400000        8.600000 
##  Perissodactyla          Pilosa        Primates     Proboscidea 
##        3.466667       14.400000       10.500000        3.600000 
##        Rodentia      Scandentia    Soricomorpha 
##       12.468182        8.900000       11.100000</code></pre>
<pre class="r"><code>tapply(df$sleep_total,df$order==&quot;Primates&quot;, sd) #计算所有Primates总睡眠时间的标准差。</code></pre>
<pre><code>##    FALSE     TRUE 
## 4.736310 2.209895</code></pre>
<p>也可按下计算</p>
<pre class="r"><code>lapply(s,sd)</code></pre>
<pre><code>## $Afrosoricida
## [1] NA
## 
## $Artiodactyla
## [1] 2.511905
## 
## $Carnivora
## [1] 3.502164
## 
## $Cetacea
## [1] 1.571623
## 
## $Chiroptera
## [1] 0.1414214
## 
## $Cingulata
## [1] 0.4949747
## 
## $Didelphimorphia
## [1] 0.9899495
## 
## $Diprotodontia
## [1] 1.838478
## 
## $Erinaceomorpha
## [1] 0.1414214
## 
## $Hyracoidea
## [1] 0.5507571
## 
## $Lagomorpha
## [1] NA
## 
## $Monotremata
## [1] NA
## 
## $Perissodactyla
## [1] 0.8144528
## 
## $Pilosa
## [1] NA
## 
## $Primates
## [1] 2.209895
## 
## $Proboscidea
## [1] 0.4242641
## 
## $Rodentia
## [1] 2.813299
## 
## $Scandentia
## [1] NA
## 
## $Soricomorpha
## [1] 2.704626</code></pre>
<pre class="r"><code>sapply(s, sd)</code></pre>
<pre><code>##    Afrosoricida    Artiodactyla       Carnivora         Cetacea 
##              NA       2.5119050       3.5021638       1.5716234 
##      Chiroptera       Cingulata Didelphimorphia   Diprotodontia 
##       0.1414214       0.4949747       0.9899495       1.8384776 
##  Erinaceomorpha      Hyracoidea      Lagomorpha     Monotremata 
##       0.1414214       0.5507571              NA              NA 
##  Perissodactyla          Pilosa        Primates     Proboscidea 
##       0.8144528              NA       2.2098951       0.4242641 
##        Rodentia      Scandentia    Soricomorpha 
##       2.8132994              NA       2.7046257</code></pre>
<pre class="r"><code>tapply(df$sleep_total,df$order,sd)</code></pre>
<pre><code>##    Afrosoricida    Artiodactyla       Carnivora         Cetacea 
##              NA       2.5119050       3.5021638       1.5716234 
##      Chiroptera       Cingulata Didelphimorphia   Diprotodontia 
##       0.1414214       0.4949747       0.9899495       1.8384776 
##  Erinaceomorpha      Hyracoidea      Lagomorpha     Monotremata 
##       0.1414214       0.5507571              NA              NA 
##  Perissodactyla          Pilosa        Primates     Proboscidea 
##       0.8144528              NA       2.2098951       0.4242641 
##        Rodentia      Scandentia    Soricomorpha 
##       2.8132994              NA       2.7046257</code></pre>


<p></p>
<script>

// add bootstrap table styles to pandoc tables
$(document).ready(function () {
  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');
});

</script>

<!-- dynamically load mathjax for compatibility with self-contained -->
<script>
  (function () {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
    document.getElementsByTagName("head")[0].appendChild(script);
  })();
</script>

<p><br></p>
]]></content>
    
    <summary type="html">
    
      根据Edex上的课程，重新根据自己的思路理一遍，方便以后查看。
    
    </summary>
    
      <category term="R" scheme="http://yoursite.com/categories/R/"/>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="apply" scheme="http://yoursite.com/tags/apply/"/>
    
  </entry>
  
  <entry>
    <title>Markdown格式</title>
    <link href="http://yoursite.com/2015/05/13/Markdown%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/13/Markdown格式/</id>
    <published>2015-05-13T19:36:35.000Z</published>
    <updated>2017-03-28T18:47:16.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h1><p>Markdown中，只需要在文本前面加上 # 即可，同理、还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加  # 即可，标题字号相应降低。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">...</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure></p>
<p>效果是这样：</p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<p>也可以用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">大标题</div><div class="line">=== (&gt;=3个)</div><div class="line">小标题</div><div class="line">--- (&gt;=3个)</div></pre></td></tr></table></figure></p>
<p>效果是这样：</p>
<blockquote>
<h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><h2 id="小标题"><a href="#小标题" class="headerlink" title="小标题"></a>小标题</h2></blockquote>
<h1 id="2-文本内容"><a href="#2-文本内容" class="headerlink" title="2. 文本内容"></a>2. 文本内容</h1><p>当我们写作时，需要呈现的基本上包括：</p>
<ul>
<li><strong>文字</strong> （加粗、斜体、字体、大小、颜色、下划线、删除、分割线）</li>
<li><strong>引用</strong> （文字、代码）</li>
<li><strong>链接</strong> （图片，其它链接）</li>
<li><strong>列表</strong> （有序、无序、嵌套）</li>
<li><p><strong>表格</strong> </p>
</li>
<li><h2 id="文字-加粗、斜体、删除、微软雅黑字体、大小、颜色、分割线、段落"><a href="#文字-加粗、斜体、删除、微软雅黑字体、大小、颜色、分割线、段落" class="headerlink" title="文字_加粗、斜体、删除、微软雅黑字体、大小、颜色、分割线、段落"></a>文字_<strong>加粗</strong>、<em>斜体</em>、<del>删除</del>、<font face="微软雅黑">微软雅黑字体</font>、<font size="2px">大小</font>、<font color="green">颜色</font>、分割线、段落</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">**加粗**</div><div class="line">*斜体* or _斜体_</div><div class="line">~~删除~~</div><div class="line">*注：以下为html的font语法，默认的markdown并不支持。</div><div class="line">&lt;font face=&quot;微软雅黑&quot;&gt;微软雅黑字体&lt;/font&gt;</div><div class="line">&lt;font size=&quot;2px&quot;&gt;大小&lt;/font&gt; 文字大小的单位可以是px，cm，inch等；</div><div class="line">&lt;font color=&quot;green&quot;&gt;颜色&lt;font&gt; 这里设置为绿色 也可以使蓝色 blue 红色red  或更精确丰富的 16进制值如 #873422；</div><div class="line">使用3个以上的星号、减号、底线就可以。（*注：不过这里的要求是：行内只能有以上3中，其中可以有空白，但不能包含除空格外的其它字符。）</div><div class="line">以一个空行开始，以一个空行结束，中间的就是一个段落</div></pre></td></tr></table></figure>
</li>
<li><h2 id="文字-引用"><a href="#文字-引用" class="headerlink" title="文字_引用"></a>文字_引用</h2><p>对于简单的文字或几行代码，可以以邮件的输入方式“&gt;”来表示。引用的里面的所有markdown格式都将有效。引用里面可以再添加次级引用。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;Dear XX,</div><div class="line">&gt;How&apos;s your going? Last week, I visted Paris. I learned some french:</div><div class="line">&gt;&gt;1.*Bonjour*;</div><div class="line">&gt;&gt;2.*Merci*;</div><div class="line">&gt;（注：这儿有一空行，退出二级引用）</div><div class="line">&gt;It&apos;s wonderful! </div><div class="line">&gt;CU soon!</div></pre></td></tr></table></figure>
</li>
</ul>
<p>效果是这样的：</p>
<blockquote>
<p>Dear XX,<br>How’s your going? Last week, I visted Paris. I learned some french:</p>
<blockquote>
<p>1.<em>Bonjour</em>;<br>2.<em>Merci</em>;</p>
</blockquote>
<p>It’s wonderful!<br>CU soon!</p>
</blockquote>
<ul>
<li><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2>Markdown支持两种风格的链接：<strong><em>Inline</em></strong>和<strong><em>Reference</em></strong>。</li>
</ul>
<p><strong>Inline</strong>：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用空格加”title属性”。</p>
<p><strong>Reference</strong>：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为<a href="http://equation85.github.io/blog/markdown-examples/" target="_blank" rel="external">链接文本</a>；定义部分可以出现在文本中的其他位置，格式为<a href="http://equation85.github.io/blog/markdown-examples/" target="_blank" rel="external">ref</a>: <a href="http://some/link/address" target="_blank" rel="external">http://some/link/address</a> (可选的标题)。<br>注：ref中不区分大小写。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">这是我的博客地址[My_blog](http://cthgj.me &quot;HUGO&quot;)。</div><div class="line">部分博客内容引用自[equation8][ref]。</div><div class="line">[ref]:http://equation85.github.io/blog/markdown-examples/</div><div class="line">*注：title 为可选；</div><div class="line">*注：ref其实就类似于写文章中的插入参考文献，先加入文字，再在文末添加references相关信息；</div></pre></td></tr></table></figure></p>
<p>效果</p>
<p>这是我的博客地址<a href="http://cthgj.me" title="HUGO">My_blog</a>。<br>部分博客内容引用自<a href="http://equation85.github.io/blog/markdown-examples/" target="_blank" rel="external">equation8</a>。</p>
<p>对于图片的链接，在中括号前加<strong>叹号</strong>即可。<br><strong><em>注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记<img>。</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Inline示例：![banner](https://raw.githubusercontent.com/e-tomato/e-tomato.github.io/master/img/banner.jpg)</div><div class="line">Reference示例：![替代文本][pic]</div><div class="line">[pic]:https://raw.githubusercontent.com/e-tomato/e-tomato.github.io/master/img/banner.jpg &quot;可选的title&quot;</div><div class="line">HTML示例：&lt;img src=&quot;https://raw.githubusercontent.com/e-tomato/e-tomato.github.io/master/img/banner.jpg&quot; alt=&quot;替代文本&quot; title=&quot;标题文本&quot; width=&quot;200&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>效果：</p>
<p>Inline示例：<img src="https://raw.githubusercontent.com/e-tomato/e-tomato.github.io/master/img/banner.jpg" alt="banner"><br>Reference示例：<img src="https://raw.githubusercontent.com/e-tomato/e-tomato.github.io/master/img/banner.jpg" alt="替代文本" title="可选的title"></p>
<p>HTML示例：<img src="https://raw.githubusercontent.com/e-tomato/e-tomato.github.io/master/img/banner.jpg" alt="替代文本" title="标题文本" width="200"></p>
<ul>
<li><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2>无序列表使用*、+或-后面加上空格来表示。<br>有序列表使用数字加英文句号加空格表示。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">* Item 1</div><div class="line">* Item 2</div><div class="line">* Item 3</div><div class="line"></div><div class="line">+ Item 1</div><div class="line">+ Item 2</div><div class="line">+ Item 3</div><div class="line"></div><div class="line">- Item 1</div><div class="line">- Item 2</div><div class="line">- Item 3</div><div class="line"></div><div class="line">1. Item 1</div><div class="line">2. Item 2</div><div class="line">3. Item 3</div></pre></td></tr></table></figure>
</li>
</ul>
<p>效果：</p>
<blockquote>
<ul>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ul>
<ul>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ul>
<ul>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ul>
<ol>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ol>
</blockquote>
<ul>
<li>##表格</li>
</ul>
<p>Markdown的扩展语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Item     | Value</div><div class="line">-------- | ---</div><div class="line">Computer | $1600</div><div class="line">Phone    | $12</div><div class="line">Pipe     | $1</div><div class="line"></div><div class="line">| Tables        | Are           | Cool  |</div><div class="line">| ------------- |:-------------:| -----:|(：表示文本位置，默认为左对齐)</div><div class="line">| col 3 is      | right-aligned | $1600 |</div><div class="line">| col 2 is      | centered      |   $12 |</div><div class="line">| zebra stripes | are neat      |    $1 |</div></pre></td></tr></table></figure></p>
<p>效果</p>
<table>
<thead>
<tr>
<th>Item</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Computer</td>
<td>$1600</td>
</tr>
<tr>
<td>Phone</td>
<td>$12</td>
</tr>
<tr>
<td>Pipe</td>
<td>$1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<p>基本上就这些了，等需要时再更新。</p>
<p>最后，由于使用jacman主题，最好使用如下语法写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中</div><div class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</div><div class="line">categories: example #分类</div><div class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</div><div class="line">description: 附加一段文章摘要，字数最好在140字以内。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      初学markdown，很多格式都不清楚，因此本文旨在根据成文的顺序，搜集各博客后总结出语法，以供自己后续练习作参考。
    
    </summary>
    
      <category term="md" scheme="http://yoursite.com/categories/md/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
</feed>
